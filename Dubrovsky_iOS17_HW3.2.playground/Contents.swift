import UIKit
import Foundation

/*  MARK: Задача 1 (основная)
    ВЫ - главный архитектор в команде разработчиков. Ваша задача - разработать программное обеспечение (ПО) для дилерских центров по продаже автомобилей.
    Ваша цель - создать гибкое ПО. Что это значит? Ваше ПО должно подходить для любой марки авто, должно быть расширяемым и масштабируемым в дальнейшем, чтобы ваша компания могла выпускать обновления.
    Задача разделена на 4 части, в каждой из них нужно самостоятельно подумать, какой тип данных передать каждому свойству для комфортной работы, а также по необходимости добавить вспомогательные методы.

    MARK: Часть 1.
    Для начала нужно описать машину минимальным набором параметров, используя протокол.
    Алгоритм выполнения:
    1) Создайте протокол 'Car'
    2) Добавьте в него свойства:
    3) 'model' (только для чтения): марка
    4) 'color' (только для чтения): цвет
    5) 'buildDate' (только для чтения): дата выпуска
    6) 'price' (чтение и запись): цена авто
    7) 'accessories' (чтение и запись): дополнительное оборудование (тонировка, сингнализация, спортивные диски)
    8) 'isServiced' (чтение и запись): сделана ли предпродажная подготовка. Обычно ее делают в дилерских центрах перед постановкой машины в салон. */

protocol Car {
    var model: String { get }
    var color: UIColor { get }
    var buildDate: String { get }
    var price: Double { get set }
    var accessories: [AccessoriesCar] { get set }
    var isServiced: Bool { get set }
}

enum AccessoriesCar: String {
    case tinting = "Тонировка"
    case alarmSystem = "Сигнализация"
    case sportsWheels = "Спортивные диски"
    case chipTuning = "Чип-тюнинг"
    case exhaust = "Спортивный выхлоп"
    case panoramicRoof = "Панарамная крыша"
}





/*  MARK: Часть 2.
    По аналогии с протоколом 'Car', нужно описать дилерский центр минимальным набором свойств и методов, используя протокол.

    Алгоритм выполнения:
    1) Создайте протокол 'Dealership'
    2) Добавьте свойства:
        a) 'name' (только для чтения): название дилерского центра (назвать по марке машины для упрощения)
        b) 'showroomCapacity' (только для чтения): максимальная вместимость автосалона по количеству машин.
        c) 'stockCars' (массив, чтение и запись): машины, находящиеся на парковке склада. Представим, что парковка не имеет лимита по количеству машин.
        d) 'showroomCars' (массив, чтение и запись): машины, находящиеся в автосалоне.
        e) 'cars' (массив, чтение и запись): хранит список всех машин в наличии.
    3) Добавьте методы:
        a) 'offerAccesories(_ :)': принимает массив акксесуаров в качестве параметра. Метод предлагает клиенту купить доп. оборудование.
        b) 'presaleService(_ :)': принимает машину в качестве параметра. Метод отправляет машину на предпродажную подготовку.
        c) 'addToShowroom(_ :)': также принимает машину в качестве параметра. Метод перегоняет машину с парковки склада в автосалон, при этом выполняет предпродажную подготовку.
        d) 'sellCar(_ :)': также принимает машину в качестве параметра. Метод продает машину из автосалона при этом проверяет, выполнена ли предпродажная подготовка.
            Также, если у машины отсутсвует доп. оборудование, нужно предложить клиенту его купить. (давайте представим, что клиент всегда соглашается и покупает :) )
        e) 'orderCar()': не принимает и не возвращает параметры. Метод делает заказ новой машины с завода, т.е. добавляет машину на парковку склада.
    
    Обратите внимание! Каждый метод должен выводить в консоль информацию о машине и выполненном действии с ней.*/

protocol Dealership {
    var name: String { get }
    var showroomCapacity: UInt { get }
    var stockCars: [Car] { get set }
    var showroomCars: [Car] { get set }
    var cars: [Car] { get set }
    
    func offerAccesories(_: [AccessoriesCar])
    func presaleService(_: Car)
    func addToShowroom(_: Car)
    func sellCar(_: Car)
    func orderCar()
}
