//import Foundation

import Darwin


//  MARK: - –ó–∞–¥–∞—á–∞ #1.
/*  –í—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∞—É–¥–∏–æ—Ç—Ä–µ–∫–æ–≤. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º—É–∑—ã–∫–∏, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ç—Ä–µ–∫–∞–º–∏.
    –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
    - –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–∫.
    - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ –Ω–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–º—è, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞–Ω–∞.
    - –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è.
    - –û–±—ä—è–≤–∏—Ç–µ –≤ –Ω–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å "–ª–µ–Ω–∏–≤—ã–º–∏" –∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏).
    - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.*/

class Song {
    let artist: String
    let titleSong: String
    let country: String
    let duration: Double
    var fullDescriptionSong: String { "- üé∏Title: '\(titleSong)', artist: '\(artist)', country: '\(country)', duration: '\(duration)'." }
    
    init(nameSong: String, artist: String, country: String, duration: Double) {
        self.titleSong = nameSong
        self.artist = artist
        self.country = country
        self.duration = duration
    }
}



class CategoryMusic {
    private(set) var nameCategory: String
    private(set) lazy var countTrack: UInt = UInt(trackList.count)
    private(set) var trackList: [String: Song] { willSet { self.countTrack = UInt(newValue.count) }}
    var fullDescriptionCategory: String { "\nüìü Description Category: name: '\(nameCategory)', countTracks: '\(countTrack)', track(s): \(informationAboutAllTracks())" }
    
    init(nameCategory: String) {
        self.nameCategory = nameCategory
        self.trackList = Dictionary<String, Song>()
    }
    
    // –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏.
    func adding(song: Song) {
        guard trackList[song.titleSong] == nil else { print("\nüìçThe song '\(song.titleSong)' already exists."); return }
        trackList[song.titleSong] = song
    }
    
    // –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–µ—Å–Ω–∏.
    func removingSongBy(name: String) {
        guard trackList[name] != nil else { print("\nüìçThere is no such song '\(name)' in the category."); return }
        trackList.removeValue(forKey: name)
    }

    // –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ø–µ—Å–Ω—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ fullDescriptionCategory.
    private func informationAboutAllTracks() -> String {
        guard !trackList.isEmpty else {return "empty."}
        var info: String = ""
        trackList.forEach{ info += "\n\($0.value.fullDescriptionSong)" }
        return info
    }
}






//  MARK: - –ó–∞–¥–∞—á–∞ #2.
/*  –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –Ω–µ–π –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –±—É–¥–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –∫–ª–∞—Å—Å—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–ª—å–∫–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.*/

class Library {
    private(set) var library: [String: CategoryMusic] = [:]
    var fullDescriptionLibrary: String { "\nüì≤ Description library, category's: \(informationAboutAllCategory())" }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    func adding(category: CategoryMusic) {
        guard library[category.nameCategory] == nil else { print("\nüìçThe category '\(category.nameCategory)' already exists."); return }
        library[category.nameCategory] = category
        //print("\nIn libraby added a new category: \(category.fullDescriptionCategory)")
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    func removingCategoryBy(name: String) {
        guard library[name] != nil else { print("\nüìçThere is no such category '\(name)' in the library."); return }
        library.removeValue(forKey: name)
    }

    // –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ fullDescriptionLibrary.
    private func informationAboutAllCategory() -> String {
        var info: String = ""
        library.forEach{ info += "\n\($0.value.fullDescriptionCategory)"}
        return info
    }
}






//  MARK: - –ó–∞–¥–∞—á–∞ #3.
//  –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ç—Ä–µ–∫–∞–º–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.

extension Library {
    
    // –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    func moving(song: Song, from sentCategory: CategoryMusic, to receivedCategory: CategoryMusic) {
        guard checksForMovingSongs(song: song, sentCategory: sentCategory, receivedCategory: receivedCategory) else { return }
        library[sentCategory.nameCategory]!.removingSongBy(name: song.titleSong)
        library[receivedCategory.nameCategory]!.adding(song: song)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    private func checksForMovingSongs(song: Song, sentCategory: CategoryMusic, receivedCategory: CategoryMusic) -> Bool {
        guard library[sentCategory.nameCategory] != nil else { print("\nüìçCategory '\(sentCategory.nameCategory)' is not in your library. You can add using the adding method."); return false }
        guard library[receivedCategory.nameCategory] != nil else { print("\nüìçCategory '\(receivedCategory.nameCategory)' is not in your library. You can add using the adding method."); return false }
        guard sentCategory.trackList[song.titleSong] != nil else { print("\nüìçThere is no specified song in category '\(sentCategory.nameCategory)'."); return false }
        guard receivedCategory.trackList[song.titleSong] == nil else { print("\nüìçThe specified song already exists in the '\(receivedCategory.nameCategory)' category."); return false }
        return true
    }
}





// MARK: - –ü—Ä–∏–º–µ—Ä—ã.
var song_1 = Song(nameSong: "Hello", artist: "Bittles", country: "Englang", duration: 3.54)
var song_2 = Song(nameSong: "Beatiful", artist: "AC/CD", country: "USA", duration: 5.21)
var song_3 = Song(nameSong: "Wonderful", artist: "Dippurple", country: "Australia", duration: 2.97)
var song_4 = Song(nameSong: "Good Bye!", artist: "Eminem", country: "USA", duration: 4.21)
var song_5 = Song(nameSong: "Rich", artist: "Drake", country: "Germany", duration: 3.66)
var song_6 = Song(nameSong: "Jacke", artist: "Morgen", country: "Russia", duration: 5.55)

var rock = CategoryMusic(nameCategory: "Rock")
var jazz = CategoryMusic(nameCategory: "Jazz")
var rap = CategoryMusic(nameCategory: "Rap")

rock.adding(song: song_1)
rock.adding(song: song_2)
jazz.adding(song: song_3)
rap.adding(song: song_4)
rap.adding(song: song_5)
rap.removingSongBy(name: "Good Bye!")

print(rock.fullDescriptionCategory)
print(jazz.fullDescriptionCategory)
print(rap.fullDescriptionCategory)

var lib = Library()
lib.adding(category: rock)
lib.adding(category: jazz)
lib.adding(category: rap)
lib.removingCategoryBy(name: "Jazz")

rock.adding(song: song_6)
rap.adding(song: song_6)
rap.adding(song: song_4)
rap.removingSongBy(name: "Good Bye!")

print(lib.fullDescriptionLibrary)

lib.moving(song: song_1, from: jazz, to: rap)
lib.moving(song: song_1, from: rap, to: jazz)
lib.moving(song: song_5, from: rock, to: rap)
lib.moving(song: song_6, from: rap, to: rock)

lib.moving(song: song_1, from: rock, to: rap)
lib.moving(song: song_2, from: rock, to: rap)

print(lib.fullDescriptionLibrary)
